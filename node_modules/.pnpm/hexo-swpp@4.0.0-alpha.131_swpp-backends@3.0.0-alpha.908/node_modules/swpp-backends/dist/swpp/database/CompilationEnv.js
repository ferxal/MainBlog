"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllowNotFoundEnum = exports.CompilationEnv = void 0;
const FilePath_1 = require("../FilePath");
const NetworkFileHandler_1 = require("../NetworkFileHandler");
const ResourcesScanner_1 = require("../ResourcesScanner");
const untils_1 = require("../untils");
const KeyValueDatabase_1 = require("./KeyValueDatabase");
/**
 * 仅在编译期生效的配置项
 */
class CompilationEnv extends KeyValueDatabase_1.KeyValueDatabase {
    constructor() {
        super('CompilationEnv', buildCommon());
    }
}
exports.CompilationEnv = CompilationEnv;
/** 拉取版本信息和 tracker 时的 404 等级 */
var AllowNotFoundEnum;
(function (AllowNotFoundEnum) {
    /** 允许任意形式的 404，包含 DNS 解析失败 */
    AllowNotFoundEnum[AllowNotFoundEnum["ALLOW_ALL"] = 0] = "ALLOW_ALL";
    /** 允许服务器返回 404 */
    AllowNotFoundEnum[AllowNotFoundEnum["ALLOW_STATUS"] = 1] = "ALLOW_STATUS";
    /** 拒绝任意形式的 404 */
    AllowNotFoundEnum[AllowNotFoundEnum["REJECT_ALL"] = 2] = "REJECT_ALL";
})(AllowNotFoundEnum || (exports.AllowNotFoundEnum = AllowNotFoundEnum = {}));
function buildCommon() {
    return {
        /**
         * 网站的基准 URL
         */
        DOMAIN_HOST: (0, KeyValueDatabase_1.buildEnv)({
            default: new URL("https://www.example.com"),
            checker(value) {
                if (value.host === 'www.example.com')
                    return {
                        value, message: 'DOMAIN_HOST 必须手动设置而非使用默认值'
                    };
                if (value.hash || value.search)
                    return {
                        value, message: '传入的域名不应当包含查询参数和片段标识符'
                    };
                if (value.protocol !== 'https:' && value.host !== '127.0.0.1' && value.host !== 'localhost')
                    return {
                        value, message: '传入的 URL 必须使用 https 协议'
                    };
                return false;
            }
        }),
        /**
         * 网站文件在本机的目录
         */
        PUBLIC_PATH: (0, KeyValueDatabase_1.buildEnv)({
            default: FilePath_1.FilePath.EMPTY,
            checker(value) {
                if (!value.absPath || value.basePublic === null)
                    return {
                        value, message: 'PUBLIC_PATH 必须手动设置而非使用默认值'
                    };
                return false;
            }
        }),
        /**
         * 项目根目录
         */
        PROJECT_PATH: (0, KeyValueDatabase_1.buildEnv)({
            default: FilePath_1.FilePath.buildProjectRoot('')
        }),
        /**
         * SW 文件生成目录（'sw'），不需要包含 js 拓展名
         */
        SERVICE_WORKER: (0, KeyValueDatabase_1.buildEnv)({
            default: 'sw',
            checker(value) {
                return value.endsWith('.js') ? {
                    value, message: 'SW 文件名不需要包含拓展名'
                } : false;
            }
        }),
        /**
         * HTML 数量限制，设置为 <= 0 表示不限制（`0`）
         */
        JSON_HTML_LIMIT: (0, KeyValueDatabase_1.buildEnv)({
            default: 0
        }),
        /**
         * 版本信息长度限制（`1024`）
         */
        VERSION_LENGTH_LIMIT: (0, KeyValueDatabase_1.buildEnv)({
            default: 1024,
            checker(value) {
                if (value < 0)
                    return {
                        value, message: '版本信息长度限制不应当小于零'
                    };
                if (value == 0) {
                    untils_1.utils.printWarning('ENV', '版本信息长度设置为 0 将完全禁止长度限制，这将导致长度无限增长。');
                }
                return false;
            }
        }),
        /**
         * swpp 的 JSON 文件的基本信息
         */
        SWPP_JSON_FILE: (0, KeyValueDatabase_1.buildEnv)({
            default: {
                swppPath: 'swpp',
                trackerPath: 'tracker.json',
                versionPath: 'update.json',
                async fetchVersionFile(compilation) {
                    const env = compilation.compilationEnv;
                    const baseUrl = env.read('DOMAIN_HOST');
                    const fetcher = env.read('NETWORK_FILE_FETCHER');
                    const isNotFound = env.read('isNotFound');
                    const isFetchSuccessful = compilation.crossDep.read('isFetchSuccessful').runOnNode;
                    try {
                        const swppPath = (0, KeyValueDatabase_1.readThisValue)(this, 'swppPath');
                        const versionPath = (0, KeyValueDatabase_1.readThisValue)(this, 'versionPath');
                        const response = await fetcher.fetch(untils_1.utils.splicingUrl(baseUrl, swppPath, versionPath));
                        if (!isNotFound.response(response)) {
                            if (isFetchSuccessful(response)) {
                                const json = await response.json().catch(err => {
                                    throw new untils_1.RuntimeException(untils_1.exceptionNames.invalidValue, 'ResourcesScanner 解序列化失败，传入的字符串是非法的 json。' +
                                        '请检查您的网站在返回 403、404、429 等错误时是否是使用 HTTP 状态码。' +
                                        '如果您的网站不实用 HTTP 状态码表示相应错误，请参考 https://swpp.kmar.top/config/cross_dep#isfetchsuccessful 做出相应修改', err);
                                });
                                return json;
                            }
                            // noinspection ExceptionCaughtLocallyJS
                            throw new untils_1.RuntimeException(untils_1.exceptionNames.error, '拉取版本信息文件时出现错误', {
                                status: response.status,
                                statusText: response.statusText,
                                headers: Object.fromEntries(response.headers.entries()),
                                body: await response.text().catch(() => null)
                            });
                        }
                    }
                    catch (e) {
                        if (!isNotFound.error(e))
                            throw e;
                    }
                    return { global: 0, info: [] };
                },
                async fetchTrackerFile(compilation) {
                    return await ResourcesScanner_1.FileUpdateTracker.parserJsonFromNetwork(compilation);
                }
            }
        }),
        /**
         * 读取一个本地文件
         */
        readLocalFile: (0, KeyValueDatabase_1.buildEnv)({
            default: (path) => {
                return untils_1.utils.readFileUtf8(path.absPath);
            }
        }),
        /**
         * 拉取网络文件
         */
        NETWORK_FILE_FETCHER: (0, KeyValueDatabase_1.buildEnv)({
            default: new NetworkFileHandler_1.FiniteConcurrencyFetcher()
        }),
        /**
         * 判断文件是否是 404
         */
        isNotFound: (0, KeyValueDatabase_1.buildEnv)({
            default: {
                response: (response) => response.status == 404,
                error: (err) => err?.cause?.code === 'ENOTFOUND'
            }
        }),
        /**
         * 是否允许 404
         */
        ALLOW_NOT_FOUND: (0, KeyValueDatabase_1.buildEnv)({
            default: AllowNotFoundEnum.ALLOW_STATUS,
            checker(value) {
                switch (value) {
                    case AllowNotFoundEnum.ALLOW_ALL:
                    case AllowNotFoundEnum.ALLOW_STATUS:
                    case AllowNotFoundEnum.REJECT_ALL:
                        return false;
                    default:
                        return { value, message: '填写了非法的 ALLOW_NOT_FOUND 值' };
                }
            }
        }),
        /**
         * 检查一个链接是否是稳定的（也就是 URL 不变其返回的结果永远不变）
         */
        isStable: (0, KeyValueDatabase_1.buildEnv)({
            default: (_url) => false
        })
    };
}
