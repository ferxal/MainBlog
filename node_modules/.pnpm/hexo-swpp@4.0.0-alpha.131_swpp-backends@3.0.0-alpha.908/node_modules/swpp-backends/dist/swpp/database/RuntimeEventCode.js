"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeEventCode = void 0;
const RuntimeKeyValueDatabase_1 = require("./RuntimeKeyValueDatabase");
class RuntimeEventCode extends RuntimeKeyValueDatabase_1.RuntimeKeyValueDatabase {
    constructor() {
        super('RuntimeEventCode', buildCommon());
    }
    /** 构建 JS 源代码 */
    buildJsSource() {
        const result = [];
        const entries = this.entries();
        for (let eventName in entries) {
            result.push(`self.addEventListener('${eventName}', ${entries[eventName].toString()})`);
        }
        return result.join(';\n');
    }
}
exports.RuntimeEventCode = RuntimeEventCode;
function buildCommon() {
    return {
        /** SW 注册后立即激活 */
        install: {
            default: (_event) => {
                // @ts-ignore
                skipWaiting();
                if (ESCAPE) {
                    // noinspection JSIgnoredPromiseFromCall
                    handleEscape();
                }
            }
        },
        /** sw 激活后立即对所有页面生效，而非等待刷新 */
        activate: {
            // @ts-ignore
            default: (event) => event.waitUntil(clients.claim())
        },
        fetch: {
            default: (event) => handleFetchEvent(event)
        },
        /** 后台检查更新 */
        periodicSync: {
            default: (event) => {
                // @ts-ignore
                if (event.tag === 'update') {
                    // @ts-ignore
                    event.waitUntil(handleUpdate(null, true));
                }
            }
        },
        message: {
            default: async (event) => {
                // @ts-ignore
                const data = event.data;
                switch (data.type) {
                    case 'update':
                        const oldVersion = await readVersion();
                        const updateResult = await handleUpdate(oldVersion);
                        if (!updateResult)
                            return;
                        switch (updateResult) {
                            case -1:
                                return postMessage('new', null);
                            case 1:
                                return postMessage('revise', null);
                            case 2:
                                return postMessage('update', null);
                            default:
                                if (Array.isArray(updateResult)) {
                                    return postMessage('update', updateResult);
                                }
                        }
                }
            }
        }
    };
}
