import { FilePath } from '../FilePath';
import { UpdateJson } from '../JsonBuilder';
import { FiniteConcurrencyFetcher } from '../NetworkFileHandler';
import { FileUpdateTracker } from '../ResourcesScanner';
import { CompilationData } from '../SwCompiler';
import { KeyValueDatabase } from './KeyValueDatabase';
export type COMMON_TYPE_COMP_ENV = ReturnType<typeof buildCommon>;
/**
 * 仅在编译期生效的配置项
 */
export declare class CompilationEnv extends KeyValueDatabase<any, COMMON_TYPE_COMP_ENV> {
    constructor();
}
/** 拉取版本信息和 tracker 时的 404 等级 */
export declare enum AllowNotFoundEnum {
    /** 允许任意形式的 404，包含 DNS 解析失败 */
    ALLOW_ALL = 0,
    /** 允许服务器返回 404 */
    ALLOW_STATUS = 1,
    /** 拒绝任意形式的 404 */
    REJECT_ALL = 2
}
declare function buildCommon(): {
    /**
     * 网站的基准 URL
     */
    readonly DOMAIN_HOST: import("./KeyValueDatabase").DatabaseValue<URL>;
    /**
     * 网站文件在本机的目录
     */
    readonly PUBLIC_PATH: import("./KeyValueDatabase").DatabaseValue<FilePath>;
    /**
     * 项目根目录
     */
    readonly PROJECT_PATH: import("./KeyValueDatabase").DatabaseValue<FilePath>;
    /**
     * SW 文件生成目录（'sw'），不需要包含 js 拓展名
     */
    readonly SERVICE_WORKER: import("./KeyValueDatabase").DatabaseValue<string>;
    /**
     * HTML 数量限制，设置为 <= 0 表示不限制（`0`）
     */
    readonly JSON_HTML_LIMIT: import("./KeyValueDatabase").DatabaseValue<number>;
    /**
     * 版本信息长度限制（`1024`）
     */
    readonly VERSION_LENGTH_LIMIT: import("./KeyValueDatabase").DatabaseValue<number>;
    /**
     * swpp 的 JSON 文件的基本信息
     */
    readonly SWPP_JSON_FILE: import("./KeyValueDatabase").DatabaseValue<{
        swppPath: string;
        trackerPath: string;
        versionPath: string;
        fetchVersionFile(compilation: CompilationData): Promise<UpdateJson>;
        fetchTrackerFile(compilation: CompilationData): Promise<FileUpdateTracker>;
    }>;
    /**
     * 读取一个本地文件
     */
    readonly readLocalFile: import("./KeyValueDatabase").DatabaseValue<(path: FilePath) => Promise<string>>;
    /**
     * 拉取网络文件
     */
    readonly NETWORK_FILE_FETCHER: import("./KeyValueDatabase").DatabaseValue<FiniteConcurrencyFetcher>;
    /**
     * 判断文件是否是 404
     */
    readonly isNotFound: import("./KeyValueDatabase").DatabaseValue<{
        response: (response: Response) => boolean;
        error: (err: any) => boolean;
    }>;
    /**
     * 是否允许 404
     */
    readonly ALLOW_NOT_FOUND: import("./KeyValueDatabase").DatabaseValue<AllowNotFoundEnum>;
    /**
     * 检查一个链接是否是稳定的（也就是 URL 不变其返回的结果永远不变）
     */
    readonly isStable: import("./KeyValueDatabase").DatabaseValue<(_url: URL) => boolean>;
};
export {};
