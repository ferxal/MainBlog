"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomCode = void 0;
const ConfigCluster_1 = require("../config/ConfigCluster");
const untils_1 = require("../untils");
const RuntimeKeyValueDatabase_1 = require("./RuntimeKeyValueDatabase");
class DomCode extends RuntimeKeyValueDatabase_1.RuntimeKeyValueDatabase {
    constructor() {
        super('DomCode', buildCommon());
    }
    buildJsSource() {
        return `
            document.addEventListener('DOMContentLoaded', () => {
                ${this.buildInnerSource()}
            })
        `;
    }
    buildInnerSource() {
        const map = this.entries();
        delete map['registry'];
        const inlineCode = Object.keys(map)
            .filter(it => it.startsWith('_inline'))
            .map(it => `${it}()`);
        return `
            const controller = navigator.serviceWorker?.controller
            if (!controller) return
            ${untils_1.utils.anyToSource(map, false, 'const')};
            ${inlineCode.join(';\n')}
            navigator.serviceWorker.addEventListener('message', messageEvent)
        `;
    }
}
exports.DomCode = DomCode;
function buildCommon() {
    return {
        registry: {
            default: (0, ConfigCluster_1.defineLazyInitConfig)((_, compilation) => {
                const value = (() => {
                    const sw = navigator.serviceWorker;
                    if (sw) {
                        sw.register('$$sw.js')
                            .then(async (registration) => {
                            console.log('SWPP 注册成功');
                            try {
                                // @ts-ignore
                                await registration.periodicSync.register("update", {
                                    minInterval: 24 * 60 * 60 * 1000
                                });
                            }
                            catch (e) {
                                console.log('Periodic Sync 注册失败', e);
                            }
                        })
                            .catch(err => console.error('SWPP 注册失败', err));
                    }
                    else {
                        console.warn('当前浏览器不支持 SW');
                    }
                }).toString();
                const path = compilation.compilationEnv.read('SERVICE_WORKER');
                return value.replace(`$$sw.js`, (path.startsWith('/') ? '' : '/') + path + '.js');
            })
        },
        postMessage2Sw: {
            default: (type) => navigator.serviceWorker.controller.postMessage({ type })
        },
        pjaxUpdate: {
            default: (url) => {
                const type = url.endsWith('js') ? 'script' : 'link';
                const name = type === 'link' ? 'href' : 'src';
                for (let item of document.getElementsByTagName(type)) {
                    // @ts-ignore
                    const itUrl = item[name];
                    if (url.length > itUrl ? url.endsWith(itUrl) : itUrl.endsWith(url)) {
                        const newEle = document.createElement(type);
                        const content = item.textContent || item.innerHTML || '';
                        Array.from(item.attributes).forEach(attr => newEle.setAttribute(attr.name, attr.value));
                        newEle.appendChild(document.createTextNode(content));
                        item.parentNode.replaceChildren(newEle, item);
                        return;
                    }
                }
            }
        },
        SESSION_KEY: {
            default: 'updated'
        },
        onSuccess: {
            default: () => console.log('版本更新成功')
        },
        _inlineA: {
            default: () => {
                if (sessionStorage.getItem(SESSION_KEY)) {
                    onSuccess();
                    sessionStorage.removeItem(SESSION_KEY);
                }
                else
                    postMessage2Sw('update');
            }
        },
        messageEvent: {
            default: (event) => {
                const data = event.data;
                sessionStorage.setItem(SESSION_KEY, data.type);
                const list = data.data?.filter((url) => /\.(js|css)$/.test(url));
                if (list?.length) {
                    // @ts-ignore
                    if (window.Pjax?.isSupported?.())
                        list.forEach(pjaxUpdate);
                    location.reload();
                }
                else {
                    onSuccess();
                    sessionStorage.removeItem(SESSION_KEY);
                }
            }
        }
    };
}
