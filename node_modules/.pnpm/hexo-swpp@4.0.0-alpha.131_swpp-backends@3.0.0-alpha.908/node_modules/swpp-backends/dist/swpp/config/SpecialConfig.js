"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyInitConfig = exports.NoCacheConfig = exports.ContextConfig = exports.IndivisibleConfig = exports.RuntimeSpecialConfig = exports.SpecialConfig = void 0;
class SpecialConfig {
    // noinspection JSUnusedGlobalSymbols
    static isSpecialConfig(config) {
        return config instanceof SpecialConfig && !this.isRuntimeSpecialConfig(config);
    }
    static isRuntimeSpecialConfig(config) {
        return config instanceof RuntimeSpecialConfig;
    }
    static isIndivisibleConfig(config) {
        return config instanceof IndivisibleConfig || config instanceof RuntimeSpecialConfig || config instanceof URL;
    }
    static isNoCacheConfig(config) {
        return config instanceof NoCacheConfig;
    }
    static isContextConfig(config) {
        return config instanceof ContextConfig;
    }
}
exports.SpecialConfig = SpecialConfig;
/** 运行时特殊配置 */
class RuntimeSpecialConfig extends SpecialConfig {
}
exports.RuntimeSpecialConfig = RuntimeSpecialConfig;
/** 不可分割的配置 */
class IndivisibleConfig extends SpecialConfig {
    constructor(value) {
        super();
        this.value = value;
    }
}
exports.IndivisibleConfig = IndivisibleConfig;
/** 区分开发环境和生产环境的配置项 */
class ContextConfig extends SpecialConfig {
    // noinspection JSUnusedGlobalSymbols
    constructor(dev, prod) {
        super();
        this.dev = dev;
        this.prod = prod;
    }
}
exports.ContextConfig = ContextConfig;
/** 不被缓存的配置 */
class NoCacheConfig extends RuntimeSpecialConfig {
    constructor(getter) {
        super();
        this.getter = getter;
    }
    get(runtime, compilation) {
        return this.getter(runtime, compilation);
    }
}
exports.NoCacheConfig = NoCacheConfig;
/** 延迟初始化配置 */
class LazyInitConfig extends RuntimeSpecialConfig {
    constructor(getter) {
        super();
        this.getter = getter;
    }
    get(runtime, compilation) {
        if (this.getter) {
            this.cache = this.getter(runtime, compilation);
            this.getter = null;
        }
        return this.cache;
    }
}
exports.LazyInitConfig = LazyInitConfig;
