import { SwppConfigTemplate } from './config/ConfigCluster';
import { ConfigLoader } from './config/ConfigLoader';
import { FilePath } from './FilePath';
import { CompilationData, RuntimeData } from './SwCompiler';
export declare class BasicActions {
    readonly context: 'dev' | 'prod';
    private readonly isBuildServiceWorker;
    private readonly domJsPath;
    private readonly diffJsonPath;
    private readonly disableTrack;
    /**
     * 构建一个基础的 swpp 行为封装器
     */
    static build(optional: BasicActionOptions): Promise<BasicActions>;
    configLoader?: ConfigLoader;
    runtimeData?: RuntimeData;
    compilationData?: CompilationData;
    /**
     * 各个文件的生成路径，为空则表示不生成（或配置未初始化）
     */
    paths: {
        trackerJson: FilePath | null;
        versionJson: FilePath | null;
        serviceWorker: FilePath | null;
        domJs: FilePath | null;
        diffJson: FilePath | null;
    };
    private constructor();
    /**
     * 加载一个配置文件或配置
     * @param pathOrCode 配置文件的绝对路径或配置对象
     */
    loadConfig(pathOrCode: string | SwppConfigTemplate): Promise<void>;
    /**
     * 批量加载配置项
     * @param pathOrCodes
     */
    loadConfigs(pathOrCodes: (string | SwppConfigTemplate)[]): Promise<void>;
    /**
     * 生成配置对象
     */
    buildConfig(): void;
    private buildCaches;
    /**
     * 构建 swpp 的各项 json、js 文件
     *
     * 该函数的结果内部会进行缓存，多次调用没有性能损耗
     *
     * @param excludeFilter 需排除的文件
     */
    buildFiles(excludeFilter?: BasicActionKey[]): Promise<BuildFileInfo[]>;
    /**
     * 生成 swpp 的各项 json、js 文件并写入到硬盘
     * @param excludeFilter 需排除的文件
     */
    saveFiles(excludeFilter?: BasicActionKey[]): Promise<void>;
}
export type BasicActionKey = 'tracker' | 'version' | 'serviceWorker' | 'domJs' | 'diffJson';
export interface BasicActionOptions {
    /** 上下文环境 */
    context: 'dev' | 'prod';
    /** 网站根目录（相对于项目根目录） */
    publicPath: string;
    /** 是否生成 sw.js 文件 */
    isServiceWorker: boolean;
    /** dom.js 文件路径（相对于网站根目录，留空表示不生成） */
    domJsPath?: string;
    /** diff.json 文件路径（相对于网站根目录，留空表示不生成） */
    diffJsonPath?: string;
    /** 是否进行引用的静态分析，留空表示不进行（禁用静态分析后不能使用无限期缓存） */
    trackLink?: boolean;
}
interface BuildFileInfo {
    key: BasicActionKey;
    path: FilePath;
    content: string;
}
export {};
