import { FilePath } from './FilePath';
import { JsonBuilder } from './JsonBuilder';
import { CompilationData } from './SwCompiler';
/**
 * 资源文件扫描器
 */
export declare class ResourcesScanner {
    private compilation;
    private oldTracker?;
    constructor(compilation: CompilationData, oldTracker?: FileUpdateTracker | undefined);
    /** 扫描指定目录下的所有文件 */
    scanLocalFile(path: FilePath): Promise<FileUpdateTracker>;
    /** 扫描网络文件 */
    private scanNetworkFile;
}
/**
 * 文件更新监听器
 */
export declare class FileUpdateTracker {
    protected compilation: CompilationData;
    private oldTracker?;
    /** 存储列表，key 为文件路径，value 为文件的唯一标识符 */
    protected map: Map<string, string>;
    /** 存储所有存在的 URL */
    protected allUrl: Set<string>;
    constructor(compilation: CompilationData, oldTracker?: FileUpdateTracker | undefined);
    /** 更新一个文件的标识符 */
    update(uri: string, value: string | Set<string> | string[]): void;
    /**
     * 同步指定的稳定资源（同步时会连同同步其连接的稳定资源）
     * @return 直接或间接连接的一些需要扫描的资源
     */
    syncStable(uri: URL, value: string[], oldTracker: FileUpdateTracker): string[];
    /** 读取一个文件的标识符 */
    get(uri: string): string | string[] | undefined;
    /** 归一化 uri */
    normalizeUri(uri: string): URL;
    /** 添加一个 URL */
    addUrl(url: string): void;
    /**
     * 判断两个 tracker 的差异
     *
     * 当一个文件满足下列条件任意一条时将会被放入到返回值当中：
     *
     * + 在新旧 tracker 中都存在且唯一标识符发生变化
     * + 在新 tracker 中不存在且在旧 tracker 中存在
     */
    diff(): Promise<JsonBuilder>;
    /**
     * 将数据序列化为 JSON
     *
     * 具体格式为：
     *
     * ```json
     * {
     *   "version": 4,
     *   "tracker" {
     *     [uri: string]: string
     *   }
     * }
     * ```
     */
    json(): string;
    /** 解序列化数据 */
    static unJson(compilation: CompilationData, jsonStr: string): FileUpdateTracker;
    /** 从网络拉取并解析 tracker */
    static parserJsonFromNetwork(compilation: CompilationData): Promise<FileUpdateTracker>;
}
