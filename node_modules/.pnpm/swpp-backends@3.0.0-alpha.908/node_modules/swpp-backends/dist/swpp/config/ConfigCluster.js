"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineIndivisibleConfig = defineIndivisibleConfig;
exports.defineContextConfig = defineContextConfig;
exports.defineNoCacheConfig = defineNoCacheConfig;
exports.defineLazyInitConfig = defineLazyInitConfig;
const SpecialConfig_1 = require("./SpecialConfig");
/**
 * 定义一个无法分割的对象配置，这对一些强依赖对象内部属性的设置很有用，可以避免对象被错误地拼接。
 *
 * 默认情况下，当定义一个对象配置时，将允许从其它配置文件中合并一部分配置到对象中，比如：
 *
 * ```typescript
 * // 当前配置
 * exampleConfig.obj = {
 *     value1: 'hello world'
 * }
 * // 如果还有一个配置文件中也声明了这个配置
 * exampleConfig.obj = {
 *     value2: 'hello swpp'
 * }
 * // 最终将合并生成如下配置
 * exampleConfig.obj = {
 *     value1: 'hello world',
 *     value2: 'hello swpp'
 * }
 * ```
 *
 * 通过该函数，可以禁止 swpp 合并配置时仅选取对象的部分字段，要么全部使用 [value] 的值，要么完全不使用 [value] 的值。
 *
 * 放入到上述例子中，假如两个 obj 任意一个或多个通过 `defineIndivisibleConfig({ xxx: xxx })` 设置，最终的值将取决于两个配置文件的优先级，
 * 若 `value2` 的优先级高将产生：
 *
 * ```typescript
 * // 最终结果
 * exampleConfig.obj = {
 *     value2: 'hello swpp'
 * }
 * ```
 */
function defineIndivisibleConfig(value) {
    return new SpecialConfig_1.IndivisibleConfig(value);
}
/**
 * 定义一个区分开发环境和生产环境的配置项。
 */
function defineContextConfig(config) {
    return new SpecialConfig_1.ContextConfig(config.dev, config.prod);
}
/**
 * 定义一个不会被缓存的配置项。
 *
 * 默认情况下，swpp 会缓存配置项的结果，下一次读取同一个配置项时便不需要经过类型检查等操作。
 *
 * 有些时候可能希望每一次读取值时都动态读取，那么可以使用此方法禁用缓存。
 *
 * 注意：
 *
 * 1. 该选项禁用缓存后对于性能有些许影响，计算结果和校验的成本越高影响越大，一般情况下无显著影响。
 * 2. 使用无缓存配置时也会同时禁用配置合并
 *
 * ---
 *
 * 例：
 *
 * ```typescript
 * // config 1
 * export const xxx = defineXxx({
 *     example: Date.now()
 * })
 * // config 2
 * export const nnn = defineNnn({
 *     example: defineNoCacheConfig(() => Date.now())
 * })
 * ```
 *
 * 对于上方这个例子，第一种写法每次读取该项配置时，结果都将相同，第一次为 `123456` 那么以后永远都将是 `123456`，而对于第二种写法，则每次调用时都能动态地获取当前系统时间。
 */
function defineNoCacheConfig(getter) {
    return new SpecialConfig_1.NoCacheConfig(getter);
}
/**
 * 定义一个延迟初始化的配置项。
 *
 * 默认情况下，swpp 会在加载配置文件时对各项配置的值进行计算，此时就出现了一个问题，您无法在设置配置时访问其它配置内容。
 *
 * 如果您希望能够延后计算配置项的值以访问其它配置项，则可以使用该函数定义配置。
 *
 * ---
 *
 * 例：
 *
 * ```typescript
 * export const xxx = defineXxx({
 *     example: defineLazyInitConfig((runtime, compilation) => {
 *         // 这里的代码将在第一次读取配置时执行
 *         // do something
 *         return <value>
 *     })
 * })
 * ```
 */
function defineLazyInitConfig(getter) {
    return new SpecialConfig_1.LazyInitConfig(getter);
}
