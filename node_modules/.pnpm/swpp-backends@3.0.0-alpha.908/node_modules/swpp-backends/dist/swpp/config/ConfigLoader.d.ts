import { CompilationData, RuntimeData } from '../SwCompiler';
import { SwppConfigCompilationEnv, SwppConfigCompilationFileParser, SwppConfigCrossDep, SwppConfigCrossEnv, SwppConfigDomConfig, SwppConfigRuntimeCore, SwppConfigRuntimeDep, SwppConfigRuntimeEvent, SwppConfigTemplate } from './ConfigCluster';
export declare class ConfigLoader {
    readonly context: 'dev' | 'prod';
    /** 支持的拓展名列表 */
    private static readonly extensions;
    private static jiti;
    private static prevTask;
    private config;
    private modifierList;
    constructor(context?: 'dev' | 'prod');
    /**
     * 加载一个配置文件，越早加载的优先级越高
     * @param file 配置文件的绝对路径
     */
    load(file: string): Promise<void>;
    /**
     * 加载一个在代码层面编写的配置
     */
    loadFromCode(config: SwppConfigTemplate): Promise<void>;
    private static waitLoad;
    /** 将配置项的内容写入到环境中 */
    generate(): Readonly<{
        runtime: RuntimeData;
        compilation: CompilationData;
    }>;
    private static mergeBlackList;
    /** 将新配置合并到已有配置中 */
    private static mergeConfig;
}
/**
 * 配置编辑器
 */
export interface SwppConfigModifier {
    /**
     * 自定义运行时和编译期的属性表
     *
     * 优先级越高越优先生效
     */
    build?: () => {
        runtime: RuntimeData;
        compilation: CompilationData;
    };
    /**
     * 本函数用于向系统注册新的属性。
     *
     * 该函数内应当只调用 xxx.append 函数及其它工具函数，非必要不应当包含其它有副作用的操作。
     *
     * 优先级越低该函数越早执行。
     */
    registry?: (runtime: RuntimeData, compilation: CompilationData) => void;
    /**
     * 本函数用于动态修改属性的值。
     *
     * 该函数内应当只调用 xxx.update 函数及其它工具函数，非必要不应当包含其它有副作用的操作。
     *
     * 优先级越低该函数越早执行
     */
    dynamicUpdate?: (runtime: RuntimeData, compilation: CompilationData) => void;
}
/** 定义一个通过 `export default` 导出的配置 */
export declare function defineConfig(config: SwppConfigTemplate): void;
/** 定义一个通过 `export const compilationEnv` 导出的配置 */
export declare function defineCompilationEnv(config: SwppConfigCompilationEnv): void;
/** 定义一个通过 `export const compilationFileParser` 导出的配置 */
export declare function defineCompilationFP(config: SwppConfigCompilationFileParser): void;
/** 定义一个通过 `export const crossEnv` 导出的配置 */
export declare function defineCrossEnv(config: SwppConfigCrossEnv): void;
/** 定义一个通过 `export const runtimeDep` 导出的配置 */
export declare function defineRuntimeDep(config: SwppConfigRuntimeDep): void;
/** 定义一个通过 `export const crossDep` 导出的配置 */
export declare function defineCrossDep(config: SwppConfigCrossDep): void;
/** 定义一个通过 `export const runtimeCore` 导出的配置 */
export declare function defineRuntimeCore(config: SwppConfigRuntimeCore): void;
/** 定义一个通过 `export const domConfig` 导出的配置 */
export declare function defineDomConfig(config: SwppConfigDomConfig): void;
/** 定义一个通过 `export const runtimeEvent` 导出的配置 */
export declare function defineRuntimeEvent(config: SwppConfigRuntimeEvent): void;
/** 定义一个通过 `export const modifier` 导出的配置 */
export declare function defineModifier(config: SwppConfigModifier): void;
