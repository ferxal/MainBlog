"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompilationData = exports.RuntimeData = exports.SwCompiler = void 0;
const CompilationEnv_1 = require("./database/CompilationEnv");
const CompilationFileParser_1 = require("./database/CompilationFileParser");
const CrossDepCode_1 = require("./database/CrossDepCode");
const DomCode_1 = require("./database/DomCode");
const KeyValueDatabase_1 = require("./database/KeyValueDatabase");
const RuntimeCoreCode_1 = require("./database/RuntimeCoreCode");
const RuntimeDepCode_1 = require("./database/RuntimeDepCode");
const CrossEnv_1 = require("./database/CrossEnv");
const RuntimeEventCode_1 = require("./database/RuntimeEventCode");
const CallChainRecorder_1 = require("./debug/CallChainRecorder");
const untils_1 = require("./untils");
class SwCompiler {
    constructor() {
        this.swCode = '';
    }
    // noinspection JSUnusedGlobalSymbols
    /**
     * 构建 sw 代码，该函数结果会被缓存
     */
    buildSwCode(runtime) {
        if (this.swCode)
            return this.swCode;
        this.swCode = '(() => {' + runtime.insertOrder
            .map(it => runtime.getDatabase(it).buildJsSource())
            .join(';\n')
            + '})()';
        return this.swCode;
    }
}
exports.SwCompiler = SwCompiler;
/** 运行时数据 */
class RuntimeData {
    constructor(compilationData) {
        /** 控制插入顺序 */
        this.insertOrder = [
            'crossEnv', 'crossDep', 'runtimeDep', 'runtimeCore', 'runtimeEvent'
        ];
        /** 运行时工具函数 */
        this.runtimeDep = new RuntimeDepCode_1.RuntimeDepCode();
        /** 运行时核心功能函数 */
        this.runtimeCore = new RuntimeCoreCode_1.RuntimeCoreCode();
        /** 运行时事件注册 */
        this.runtimeEvent = new RuntimeEventCode_1.RuntimeEventCode();
        /** DOM 相关设置 */
        this.domConfig = new DomCode_1.DomCode();
        /** 追踪调用链 */
        this.debugCallChain = new CallChainRecorder_1.CallChainRecorder();
        this.crossDep = compilationData.crossDep;
        this.crossEnv = compilationData.crossEnv;
    }
    getDatabase(key) {
        if (!(key in this))
            throw new untils_1.RuntimeException(untils_1.exceptionNames.invalidKey, `传入的 key [${key}] 不在当前对象中存在`);
        if (key == 'insertOrder')
            throw new untils_1.RuntimeException(untils_1.exceptionNames.invalidKey, `传入的 key [${key}] 非法`);
        // @ts-ignore
        return this[key];
    }
    initCompilation(compilation) {
        for (let key of this.insertOrder) {
            this.getDatabase(key).initRuntimeAndCompilation(this, compilation);
        }
        this.domConfig.initRuntimeAndCompilation(this, compilation);
    }
    freezeAll() {
        this.insertOrder.forEach(it => this.getDatabase(it).freeze());
        this.domConfig.freeze();
    }
}
exports.RuntimeData = RuntimeData;
/** 编译时数据 */
class CompilationData {
    constructor() {
        this.compilationEnv = new CompilationEnv_1.CompilationEnv();
        this.crossDep = new CrossDepCode_1.CrossDepCode();
        this.crossEnv = new CrossEnv_1.CrossEnv();
        this.fileParser = new CompilationFileParser_1.CompilationFileParser();
    }
    initRuntime(runtime) {
        for (let key in this) {
            const value = this[key];
            if (value instanceof KeyValueDatabase_1.KeyValueDatabase) {
                value.initRuntimeAndCompilation(runtime, this);
            }
        }
    }
    freezeAll() {
        for (let key in this) {
            const value = this[key];
            if (value instanceof KeyValueDatabase_1.KeyValueDatabase) {
                value.freeze();
            }
        }
    }
}
exports.CompilationData = CompilationData;
