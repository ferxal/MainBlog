"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossEnv = void 0;
const path_1 = __importDefault(require("path"));
const ConfigCluster_1 = require("../config/ConfigCluster");
const untils_1 = require("../untils");
const KeyValueDatabase_1 = require("./KeyValueDatabase");
const RuntimeKeyValueDatabase_1 = require("./RuntimeKeyValueDatabase");
/** 判断是否是一个合法的 HTTP header 名称 */
function isLegalHeaderName(name) {
    return /^[a-zA-Z0-9-]+$/.test(name);
}
/** 环境变量存储器 */
class CrossEnv extends RuntimeKeyValueDatabase_1.RuntimeKeyValueDatabase {
    constructor() {
        super('CrossEnv', buildCommon(), (key, value) => {
            if (typeof value === 'function') {
                throw new untils_1.RuntimeException(untils_1.exceptionNames.invalidVarType, `crossEnv[${key}] 应当返回一个非函数`, { value: value.toString() });
            }
        });
    }
    /** 构建 JS 源代码 */
    buildJsSource() {
        return untils_1.utils.anyToSource(this.entries(), true, 'const');
    }
}
exports.CrossEnv = CrossEnv;
function buildCommon() {
    return {
        /** 缓存库名称 */
        CACHE_NAME: (0, KeyValueDatabase_1.buildEnv)({ default: 'kmarBlogCache' }),
        /** 永久缓存标记 */
        INFINITE_CACHE: (0, KeyValueDatabase_1.buildEnv)({
            default: Symbol(),
            checker(value) {
                // noinspection SuspiciousTypeOfGuard
                if (typeof value !== 'symbol') {
                    return { value, message: '填写的值应当为一个 Symbol' };
                }
                return false;
            }
        }),
        /** 存储版本号的 URL */
        VERSION_PATH: (0, KeyValueDatabase_1.buildEnv)({
            default: 'https://id.v3/',
            checker(value) {
                if (!untils_1.utils.checkUrl(value)) {
                    return { value, message: '填写的 URL 不合法' };
                }
                if (!value.endsWith('/')) {
                    return { value, message: '填写的 URL 应当以“/”结尾' };
                }
                return false;
            }
        }),
        /** 逃生门版本号 */
        ESCAPE: (0, KeyValueDatabase_1.buildEnv)({ default: 0 }),
        /** 存储失效信息的头名称 */
        INVALID_KEY: (0, KeyValueDatabase_1.buildEnv)({
            default: 'X-Swpp-Invalid',
            checker(value) {
                if (!isLegalHeaderName(value)) {
                    return { value, message: '填写的 key 值是非法的 header 名称' };
                }
                return false;
            }
        }),
        /** 存储入库时间的头名称 */
        STORAGE_TIMESTAMP: (0, KeyValueDatabase_1.buildEnv)({
            default: 'X-Swpp-Time',
            checker(value) {
                if (!isLegalHeaderName(value)) {
                    return { value, message: '填写的 key 值是非法的 header 名称' };
                }
                return false;
            }
        }),
        /** 版本文件所在目录 */
        UPDATE_JSON_URL: (0, KeyValueDatabase_1.buildEnv)({
            default: (0, ConfigCluster_1.defineLazyInitConfig)((_, compilation) => {
                const info = compilation.compilationEnv.read('SWPP_JSON_FILE');
                return path_1.default.posix.join(info.swppPath, info.versionPath);
            }),
            checker(value) {
                if (this.manual)
                    return { value, message: '不应当手动设置该项！' };
                return false;
            }
        }),
        /** 检查更新的最短时间间隔 */
        UPDATE_CD: (0, KeyValueDatabase_1.buildEnv)({
            default: 600000
        })
    };
}
