import { BrowserVersion } from '../SwCompiler';
import { RuntimeEnvErrorTemplate } from './KeyValueDatabase';
import { RuntimeKeyValueDatabase } from './RuntimeKeyValueDatabase';
/** 仅在浏览器端执行的函数 */
export type FunctionInBrowser<Args extends any[], R> = (...args: Args) => R;
export type COMMON_KEY_RUNTIME_DEP = ReturnType<typeof buildCommon>;
/** 运行时依赖代码 */
export declare class RuntimeDepCode extends RuntimeKeyValueDatabase<FunctionInBrowser<any[], any> | null, COMMON_KEY_RUNTIME_DEP> {
    constructor();
    /** 构建 JS 源代码 */
    buildJsSource(): string;
}
declare function buildCommon(): {
    /** 尝试匹配一个 cache */
    readonly matchFromCaches: {
        readonly default: (request: RequestInfo | URL) => Promise<Response | undefined>;
    };
    /**
     * 将一个 response 写入到 cache 中
     * @param request 请求信息
     * @param response 要写入的 response，注意需要自己克隆 response
     * @param date 是否写入时间戳
     */
    readonly writeResponseToCache: {
        readonly default: (request: RequestInfo | URL, response: Response, date?: boolean) => Promise<void>;
    };
    /** 标记一个缓存为废弃缓存 */
    readonly markCacheInvalid: {
        readonly default: (request: RequestInfo | URL) => Promise<void | undefined>;
    };
    /** 判断指定的缓存是否是有效缓存 */
    readonly isValidCache: {
        readonly default: (response: Response, rule: number | symbol) => boolean;
    };
    /** 读取版本号 */
    readonly readVersion: {
        readonly default: () => Promise<BrowserVersion | undefined>;
    };
    /** 写入版本号 */
    readonly writeVersion: {
        readonly default: (version: BrowserVersion) => Promise<void>;
    };
    /**
     * 向指定客户端发送消息
     * @param type 消息类型
     * @param data 消息体
     * @param goals 客户端对象，留空表示所有客户端
     */
    readonly postMessage: {
        readonly default: FunctionInBrowser<any, any>;
    };
    /** 将 error 转换为一个 599 Response */
    readonly transferError2Response: {
        readonly default: (err: Error) => Response;
    };
    /** 拉取一个文件 */
    readonly fetchWrapper: {
        readonly default: (request: Request, banCache: boolean, cors: boolean, optional?: RequestInit) => Promise<Response>;
    };
    /** 是否启用 cors */
    readonly isCors: {
        readonly default: (request: Request) => boolean;
    };
    /** 获取竞速列表 */
    readonly getFastestRequests: {
        readonly default: FunctionInBrowser<any[], any> | null;
        readonly checker: (value: FunctionInBrowser<any[], any> | null) => false | RuntimeEnvErrorTemplate<FunctionInBrowser<any[], any>>;
    };
    /** 获取备用 URL 列表 */
    readonly getStandbyRequests: {
        readonly default: FunctionInBrowser<any[], any> | null;
        readonly checker: (value: FunctionInBrowser<any[], any> | null) => false | RuntimeEnvErrorTemplate<FunctionInBrowser<any[], any>>;
    };
    /** URL 竞速拉取 */
    readonly fetchFastest: {
        readonly default: (list: Request[], optional?: RequestInit) => Promise<Response>;
    };
    /** 备用 URL */
    readonly fetchStandby: {
        readonly default: (request: Request, standbyRequests: {
            t: number;
            r: Request | undefined;
            l: () => Request[];
        }, optional?: RequestInit) => Promise<Response>;
    };
    /**
     * 拉取文件。
     *
     * 该方法不得抛出任何形式的异常，当遇到异常时，应当封装为 response 返回，状态码设置为 `6xx`
     *
     * @param {RequestInfo | URL} request 请求头或 URL
     * @param {?RequestInit} optional 配置项
     * @return {Response}
     */
    readonly fetchFile: {
        readonly default: import("../config/SpecialConfig").LazyInitConfig<(requestOrUrl: RequestInfo | URL, optional?: RequestInit) => Promise<Response>>;
    };
    /** 是否阻断请求 */
    readonly isBlockRequest: {
        readonly default: (request: Request) => boolean;
    };
    /** 修改请求 */
    readonly modifyRequest: {
        readonly default: (request: Request) => Request | null | undefined;
    };
};
export {};
