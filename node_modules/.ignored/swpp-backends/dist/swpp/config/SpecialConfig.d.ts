import { CompilationData, RuntimeData } from '../SwCompiler';
import { SwppConfigValueExp } from './ConfigCluster';
export type RuntimeSupplier<T> = (runtime: RuntimeData, compilation: CompilationData) => T;
export declare class SpecialConfig<_T> {
    static isSpecialConfig(config: any): config is SpecialConfig<any>;
    static isRuntimeSpecialConfig(config: any): config is RuntimeSpecialConfig<any>;
    static isIndivisibleConfig(config: any): boolean;
    static isNoCacheConfig(config: any): config is NoCacheConfig<any>;
    static isContextConfig(config: any): config is ContextConfig<any>;
}
/** 运行时特殊配置 */
export declare abstract class RuntimeSpecialConfig<T> extends SpecialConfig<T> {
    abstract get(runtime: RuntimeData, compilation: CompilationData): T;
}
/** 不可分割的配置 */
export declare class IndivisibleConfig<T> extends SpecialConfig<T> {
    readonly value: T;
    constructor(value: T);
}
/** 区分开发环境和生产环境的配置项 */
export declare class ContextConfig<T> extends SpecialConfig<SwppConfigValueExp<T>> {
    readonly dev: SwppConfigValueExp<T>;
    readonly prod: SwppConfigValueExp<T>;
    constructor(dev: SwppConfigValueExp<T>, prod: SwppConfigValueExp<T>);
}
/** 不被缓存的配置 */
export declare class NoCacheConfig<T> extends RuntimeSpecialConfig<T> {
    private getter;
    constructor(getter: RuntimeSupplier<T>);
    get(runtime: RuntimeData, compilation: CompilationData): T;
}
/** 延迟初始化配置 */
export declare class LazyInitConfig<T> extends RuntimeSpecialConfig<T> {
    private getter;
    private cache;
    constructor(getter: RuntimeSupplier<T>);
    get(runtime: RuntimeData, compilation: CompilationData): T;
}
