import { RuntimeSpecialConfig } from '../config/SpecialConfig';
import { CompilationData, RuntimeData } from '../SwCompiler';
/** 键值对存储器 */
export declare class KeyValueDatabase<T, CONTAINER extends Record<string, DatabaseValue<T>>> {
    readonly namespace: string;
    private readonly globalChecker?;
    private dataValues;
    private valueCaches;
    private _runtime;
    private _compilation;
    /**
     * @param namespace 命名空间
     * @param map 默认值
     * @param globalChecker 全局检查器（优先于每个属性设置的 checker 执行），遇到问题直接抛出异常
     */
    constructor(namespace: string, map?: CONTAINER, globalChecker?: ((key: string, value: T) => void) | undefined);
    /** 延迟初始化 */
    protected lazyInit(map: CONTAINER): void;
    /** 初始化各项数据 */
    initRuntimeAndCompilation(runtime: RuntimeData, compilation: CompilationData): void;
    /**
     * 读取指定键对应的值。
     *
     * 注意：允许被缓存的值返回后是不允许被修改的，不缓存的值是允许修改的。
     */
    read<K extends keyof CONTAINER | string>(_key: K): K extends keyof CONTAINER ? Exclude<CONTAINER[K]['default'], RuntimeSpecialConfig<any>> : T;
    /** 读取默认配置 */
    readDefault<K extends keyof CONTAINER | string>(_key: K): K extends keyof CONTAINER ? CONTAINER[K]['default'] : T;
    /**
     * 设置指定键对应的值
     */
    update<K extends keyof CONTAINER | string>(key: K, manual: T | RuntimeSpecialConfig<T>): void;
    /**
     * 追加键值对
     */
    append(key: string, env: DatabaseValue<T>): void;
    /** 判断是否存在指定的环境变量 */
    hasKey<K extends keyof CONTAINER | string>(key: K): (K extends keyof CONTAINER ? true : boolean);
    /** 判断指定键对应的环境变量是否存在用户设置的值 */
    hasValue<K extends keyof CONTAINER | string>(key: K): boolean;
    /** 获取所有键值对 */
    entries(): Record<string, T>;
    /** 冻结 KV 库，冻结后无法再添加和修改内容 */
    freeze(): void;
    protected get runtime(): RuntimeData;
    protected get compilation(): CompilationData;
    private set runtime(value);
    private set compilation(value);
}
/**
 * 为优化 IDE 的类型推断提供的函数，直接返回传入的值
 * @param env
 */
export declare function buildEnv<T>(env: DatabaseValue<T>): DatabaseValue<T>;
/**
 * 读取指定对象中的指定字段。
 *
 * 由于配置文件中允许同时写入 T 或 `Runtime<T>`，当在配置项中使用 `this` 时，需要先判定 `this` 是哪一个类型
 */
export declare function readThisValue<T extends RuntimeSpecialConfig<object> | object, K extends keyof (T extends RuntimeSpecialConfig<any> ? ReturnType<T['get']> : T)>(obj: T, key: K): T extends RuntimeSpecialConfig<any> ? ReturnType<T['get']>[K] : T[K];
export interface DatabaseValue<T> {
    /** 缺省值 */
    default: T | RuntimeSpecialConfig<T>;
    /** 用户填入的值 */
    manual?: T | RuntimeSpecialConfig<T>;
    /** 检查器，返回 false 表示无错误 */
    checker?: (value: T) => false | RuntimeEnvErrorTemplate<T>;
}
export interface RuntimeEnvErrorTemplate<T> {
    value: T;
    message: string;
}
