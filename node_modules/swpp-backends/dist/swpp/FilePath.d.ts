import { CompilationData } from './SwCompiler';
export declare class FilePath {
    readonly absPath: string;
    readonly baseProject: string | null;
    readonly basePublic: string | null;
    /**
     * @param absPath 绝对路径
     * @param baseProject 相对于项目根目录的路径，如果路径不在项目范围内，则为 null
     * @param basePublic 相对于网站根目录的路径，如果路径不在网站范围内，则为 null
     * @private
     */
    private constructor();
    /**
     * 检查路径是否在网站范围内
     */
    get isPublic(): boolean;
    /**
     * 检查路径是否在项目范围内
     */
    get isProject(): boolean;
    /**
     * 检查目录或文件是否存在
     */
    exists(): Promise<boolean>;
    private statCache;
    /**
     * 检查路径是否指向一个目录
     */
    isDirectory(): Promise<boolean>;
    /**
     * 检查路径是否指向一个文件
     */
    isFile(): Promise<boolean>;
    /**
     * 将指定目录拼接到当前路径之后
     */
    append(subPath: string, ...subPaths: string[]): FilePath;
    /**
     * 将指定目录拼接到当前路径之后
     */
    join(subPath: string, ...subPaths: string[]): FilePath;
    /**
     * 遍历当前路径下的所有文件（不含文件夹）
     * @param consumer
     */
    walkAllFile(consumer: (filePath: FilePath) => Promise<void> | void): Promise<void>;
    /**
     * 获取文件名
     */
    fileName(): string;
    /**
     * 获取上一级目录
     */
    parent(): FilePath;
    /** 获取拓展名，包含 `.` */
    extname(): string;
    /**
     * 创建目录（不包含当前目录，只创建父级目录）
     */
    mkdirs(): Promise<void>;
    /** 空目录 */
    static EMPTY: FilePath;
    /**
     * 从绝对路径获取 FilePath
     * @param absPath 绝对路径
     * @param compilation 编译期数据
     */
    static fromAbsPath(absPath: string, compilation: CompilationData): FilePath;
    /**
     * 构建网站根目录的 FilePath
     * @param path 绝对路径或相对路径（相对于项目根目录），以 `/` 开头或 `x:/` 开头判定为绝对路径
     * @param projectRoot 项目根目录（绝对路径或相对路径（相对于工作目录））
     */
    static buildPublicRoot(path: string, projectRoot: FilePath): FilePath;
    /**
     * 构建项目根目录的 FilePath
     * @param path 绝对路径或相对路径（相对于工作目录）
     */
    static buildProjectRoot(path: string): FilePath;
}
