"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeException = exports.exceptionNames = exports.utils = void 0;
const fs_1 = __importDefault(require("fs"));
const crypto = __importStar(require("node:crypto"));
exports.utils = {
    /** 检查指定 URL 是否是合法的 URL */
    checkUrl(url) {
        try {
            new URL(url);
            return true;
        }
        catch (e) {
            return false;
        }
    },
    /**
     * 拼接链接
     */
    splicingUrl(base, ...values) {
        return new URL(values.join('/').replaceAll(/(\/+)|\\/g, '/'), base);
    },
    /**
     * 将任意的对象转化为 JS 源码
     *
     * @param obj 要进行转化的对象
     * @param includeEmptyValue 是否包含空的值，当为 false 时将不在源码中写入值为 null 和 undefined 的内容
     * @param writeAsVar 以变量形式写入时填入值，当存在非法变量名是会报错
     * @return 返回 JS 源代码，注意：该函数不保证导出的代码的美观度，也不保证字符串的引号一定使用某一种引号
     * @throws RuntimeException 若 {@link writeAsVar} 启用且 {@link obj} 中存在非法变量名 / {code = "invalid_var_name"}
     * @throws RuntimeException 若 {@link obj} 中包含 symbol 类型 / {code = "invalid_var_type"}
     *
     * @example <caption>基础示例</caption>
     * // "{hello: 'world'}"
     * anyToSource({hello: 'world', empty: null})
     * @example <caption>includeEmptyValue 示例</caption>
     * // "{hello: 'world', empty: null}"
     * anyToSource({hello: 'world', empty: null}, true)
     * @example <caption>writeAsVar 示例</caption>
     * // """
     * // const hello = 'world';
     * // const code = 'js';
     * // """
     * anyToSource({hello: 'world', code: 'js'}, false, 'const')
     * @example <caption>特殊情况</caption>
     * anyToSource({empty: null})               // "{}"
     * anyToSource({empty: null}, false, 'let') // ""
     * anyToSource(null)                        // ""
     */
    anyToSource(obj, includeEmptyValue = false, writeAsVar) {
        if (!obj)
            return '';
        const resultList = [];
        const pushToResult = (key, value) => {
            if (writeAsVar) {
                if (!/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(key)) {
                    throw new RuntimeException(exports.exceptionNames.invalidVarName, '非法的变量名：' + key);
                }
                resultList.push(`${writeAsVar} ${key} = ${value}`);
            }
            else if (/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(key)) {
                resultList.push(`${key}: ${value}`);
            }
            else {
                resultList.push(`'${key}': ${value}`);
            }
        };
        for (let key in obj) {
            const value = obj[key];
            if ((value === null || value === undefined) && !includeEmptyValue)
                continue;
            switch (typeof value) {
                case "undefined":
                    pushToResult(key, 'undefined');
                    break;
                case "object":
                    if (!value)
                        pushToResult(key, 'null');
                    else {
                        const valueStr = this.anyToSource(value, includeEmptyValue);
                        pushToResult(key, valueStr);
                    }
                    break;
                case "boolean":
                case "number":
                    pushToResult(key, value.toString());
                    break;
                case "string":
                    pushToResult(key, "'" + value.replaceAll("'", "\\'") + "'");
                    break;
                case "bigint":
                    pushToResult(key, value.toString() + 'n');
                    break;
                case "function": {
                    const text = value.toString();
                    if (text.startsWith('function ') || text.startsWith('async function ')) { // function ${key}(xxx) { xxx }
                        if (writeAsVar) {
                            resultList.push(text);
                        }
                        else {
                            resultList.push(text.substring(9).trimStart());
                        }
                    }
                    else {
                        const firstIndex = text.indexOf('{');
                        const startIndex = text.indexOf('=>');
                        if (startIndex > 0 && (firstIndex < 0 || startIndex < firstIndex)) {
                            // (xxx) => {}
                            pushToResult(key, text);
                        }
                        else {
                            if (writeAsVar) {
                                resultList.push('function ' + text);
                            }
                            else {
                                resultList.push(text);
                            }
                        }
                    }
                    break;
                }
                case "symbol":
                    if (Symbol.keyFor(value)) {
                        pushToResult(key, `Symbol.for('${Symbol.keyFor(value)}')`);
                    }
                    else {
                        pushToResult(key, value.toString());
                    }
                    break;
            }
        }
        return writeAsVar ? resultList.join(';\n') : '{\n' + resultList.join(',\n') + '\n};';
    },
    /** 判断指定链接的 host 是否为指定的 host */
    isSameHost(path, baseUrl) {
        try {
            const url = new URL(path, baseUrl);
            return baseUrl.hostname === url.hostname && url.pathname.startsWith(baseUrl.pathname);
        }
        catch (e) {
            throw new RuntimeException(exports.exceptionNames.error, `传入的 path[${path.toString()}] 不合法`, e);
        }
    },
    /** 计算字符串的哈希值 */
    calcHash(content) {
        const hash = crypto.createHash('md5');
        hash.update(content);
        return hash.digest('hex');
    },
    time() {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        return `${hours}:${minutes}:${seconds}`;
    },
    printError(title, err) {
        console.error(`[${this.time()}] [SWPP] [${title}]:`, err);
    },
    printWarning(title, warning) {
        console.warn(`[${this.time()}] [SWPP] [${title}]: ${JSON.stringify(warning, null, 2)}`);
    },
    printInfo(title, info) {
        console.info(`[${this.time()}] [SWPP] [${title}]:`, info);
    },
    /**
     * 将一个对象中的值都映射为另一个类型的值
     * @param obj
     * @param transfer
     */
    objMap(obj, transfer) {
        const result = {};
        for (let key in obj) {
            const value = obj[key];
            result[key] = transfer(value, key);
        }
        return result;
    },
    /**
     * 在可迭代容器中查找满足指定条件的元素的下标
     */
    findValueInIterable(set, predicate) {
        const result = [];
        let index = 0;
        for (let item of set) {
            if (predicate(item))
                result.push({ index, value: item });
            ++index;
        }
        return result;
    },
    /**
     * 查找一个字符串中倒数第二次出现的子串的下标
     */
    findSecondLastIndex(str, searchString, position = str.length) {
        const lastIndex = str.lastIndexOf(searchString, position);
        if (lastIndex < 0)
            return lastIndex;
        return str.lastIndexOf(searchString, lastIndex - 1);
    },
    /** 写入一个文件 */
    writeFile(path, data, optional = 'utf-8') {
        return fs_1.default.promises.writeFile(path, data, optional);
    },
    /** 读取一个文件 */
    readFileUtf8(path) {
        return fs_1.default.promises.readFile(path, 'utf-8');
    }
};
exports.exceptionNames = {
    /** 循环依赖 */
    circularDependencies: 'circular_dependencies',
    /** 无效的变量名 */
    invalidVarName: 'invalid_var_name',
    /** 无效的变量类型 */
    invalidVarType: 'invalid_var_type',
    /** 无效的插入键 */
    invalidKey: 'invalid_key',
    /** 无效的插入值 */
    invalidValue: 'invalid_value',
    /** KV 库已经被冻结无法修改 */
    isFrozen: 'is_frozen',
    /** 不支持的版本号 */
    unsupportedVersion: 'unsupported_version',
    /** 不支持的文件类型 */
    unsupportedFileType: 'unsupported_file_type',
    /** 不支持的操作 */
    unsupportedOperate: 'unsupported_operate',
    /** 空指针 */
    nullPoint: 'null_point',
    /** 配置文件已经完成构建 */
    configBuilt: 'config_built',
    /** 404 错误 */
    notFound: 'not_found',
    /** 文件或目录已存在 */
    fileDuplicate: 'file_duplicate',
    /** 超时 */
    timeout: 'timeout',
    /** 网络错误 */
    networkError: 'network_error',
    /** 未知分类错误 */
    error: 'error'
};
/** 运行时异常 */
class RuntimeException extends Error {
    constructor(code, message, causeBy) {
        super();
        this.code = code;
        this.name = `top.kmar.swpp.RuntimeException[${code}]`;
        this.message = '运行时发生异常 ' + message;
        if (causeBy) {
            if (causeBy instanceof Error) {
                // @ts-ignore
                this.causeBy = causeBy.stack?.toString?.() || causeBy.toString();
            }
            else {
                // @ts-ignore
                this.addOn = JSON.stringify(causeBy, null, 2);
            }
        }
        Object.setPrototypeOf(this, RuntimeException.prototype);
    }
}
exports.RuntimeException = RuntimeException;
